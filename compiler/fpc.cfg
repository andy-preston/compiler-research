# Try compiling with the -dRELEASE or -dDEBUG on the commandline

#IFDEF RELEASE
    -O2
    -Xs
    #WRITE Compiling Release Version
#ENDIF

#IFDEF DEBUG
    -g
    -Crtoi
    #WRITE Compiling Debug Version
#ENDIF

-Parm
-Tembedded
-WpSTM32F401CC
-XP$fpctarget-

# -Mfpc     - free pascal dialect (default)
# -Mobjfpc  - switch some Delphi 2 extensions on
# -Mdelphi  - tries to be Delphi compatible
# -Mtp      - tries to be TP/BP 7.0 compatible
# -Mgpc     - tries to be gpc compatible
# -Mmacpas  - tries to be compatible to the macintosh pascal dialects
#
# -Mobjfpc  - turn on Object Pascal extensions by default
#
# -S2       - same as -Mobjfpc
# -Sc       - supports operators like C (*=,+=,/= and -=)
# -Sa       - include assertion code.
# -Sd       - same as -Mdelphi
# -Se<x>    - error options. <x> is a combination of the following:
#     <n> : compiler stops after the <n> errors (default is 1)
#     w : compiler stops also after warnings
#     n : compiler stops also after notes
#     h : compiler stops also after hints
# -Sg       - allow LABEL and GOTO
# -Sh       - Use ansistrings
# -Si       - support C++ styled INLINE
# -Sk       - load fpcylix unit
# -SI<x>    - set interface style to <x>
# -SIcom    - COM compatible interface (default)
# -SIcorba  - CORBA compatible interface
# -Sm       - support macros like C (global)
# -So       - same as -Mtp
# -Sp       - same as -Mgpc
# -Ss       - constructor name must be init (destructor must be done)
# -St       - allow static keyword in objects
# -Sx       - enable exception keywords (default in Delphi/ObjFPC modes)
#
# Allow goto, inline, C-operators, C-vars
-Sgic

# Set the default heapsize to 8Mb
#-Ch8000000

# Set default codegeneration checks (iocheck, overflow, range, stack)
#-Ci
#-Co
#-Cr
#-Ct

# Optimizer switches
# -Os    - generate smaller code
# -O1    - level 1 optimizations (quick optimizations, debuggable)
# -O2    - level 2 optimizations (-O1 + optimizations which make debugging more difficult)
# -O3    - level 3 optimizations (-O2 + optimizations which also may make the program slower rather than faster)
# -Op<x> - set target cpu for optimizing, see fpc -i for possible values
#
# See "fpc -i" also for more fine-grained control over optimizations

# path to the messagefile, not necessary anymore but can be used to override
# the default language
#-Fr/usr/$fpcversion/msg/errore.msg
#-Fr/usr/$fpcversion/msg/errorn.msg

# searchpath for includefiles
#-Fi/pp/inc;/pp/rtl/inc

# searchpath for units
-Fu/usr/local/lib/fpc/$fpcversion/units/$fpctarget
-Fu/usr/local/lib/fpc/$fpcversion/units/$fpctarget/*
-Fu/usr/local/lib/fpc/$fpcversion/units/$fpctarget/rtl

# searchpath for libraries
-Fl.

# generate always debugging information for GDB - slows down the compile
# -gc - generate checks for pointers
# -gd - use dbx
# -gg - use gsym
# -gh - use heap trace unit (for memory leak debugging)
# -gl - use line info unit to show more info for backtraces
# -gv - generates programs tracable with valgrind
# -gw - generate dwarf debugging info

# Enable debuginfo and use the line info unit by default
#-gl

# always pass an option to the linker
#-k-s

# Always strip debuginfo from the executable
-Xs

# Write always a nice FPC logo ;)
-l

# Verbosity
# e : Show errors (default)
# w : Show warnings
# n : Show notes
# h : Show hints
# i : Show general info
# l : Show linenumbers
# a : Show everything
# b : Write file names messages with full path
# v : write fpcdebug.txt with lots of debugging info
#
# d : Show debug info
# u : Show unit info
# t : Show tried/used files
# c : Show conditionals
# d : Show debug info
# r : Rhide/GCC compatibility mode
# p : Write tree.log with parse tree

-viwn
# If you don't want so much verbosity use
#-vw
